{"remainingRequest":"/Users/bhavya/Desktop/projects/chat_dashboard/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/bhavya/Desktop/projects/chat_dashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/bhavya/Desktop/projects/chat_dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bhavya/Desktop/projects/chat_dashboard/src/views/privatechat.vue?vue&type=template&id=7f1f79b1&scoped=true&","dependencies":[{"path":"/Users/bhavya/Desktop/projects/chat_dashboard/src/views/privatechat.vue","mtime":1610035426072},{"path":"/Users/bhavya/Desktop/projects/chat_dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bhavya/Desktop/projects/chat_dashboard/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/bhavya/Desktop/projects/chat_dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bhavya/Desktop/projects/chat_dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}